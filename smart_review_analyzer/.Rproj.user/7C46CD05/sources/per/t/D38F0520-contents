#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(rvest)
sites <<- list("SAMSUNG GALAXY S20 ULTRA" ,
               "Xiaomi Redmi Note 9 Pro" ,
               "APPLE IPHONE 12 PRO MAX")
######################################################################################
ui<-fluidPage(
    titlePanel("SMART REVIEW ANALYZER"),
    sidebarLayout(
        sidebarPanel(
            selectInput("selection", "Choose a product:",
                        choices = sites),
            actionButton("update", "Change"),
            hr(),
            
            sliderInput("max",
                        "Maximum Number of Words:Wordcloud",
                        min = 1,  max = 300,  value = 100)
        ),
        mainPanel(
            textOutput("text1"),
            tabsetPanel(
                tabPanel("HISTOGRAM", plotOutput("hist")),
                tabPanel("WORDCLOUD", plotOutput("plot"))
            ) 
        )))

##########################################################################################

server <- function(input, output){
    
    crawl<-(function(forcasthtml1,forcasthtml2){
        
        #forcast <- html_text(forcasthtml)
        #forcast
        forcast1<-html_text(forcasthtml1)

        if(missing(forcasthtml2)){
            forcast <- html_text(forcasthtml1)
        }else{
            forcast2<-html_text(forcasthtml2)
            forcast<-cbind(forcast1,forcast2)
        }
        #install.packages("tm")
        #R package for text mining
        library(tm)
        #load your texts into R.
        
        doc.vec <- VectorSource(forcast)
        doc.corpus <- VCorpus(doc.vec)
        summary(doc.corpus)
        
        ##First we convert all of the text to lowercase
        doc.corpus <- tm_map(doc.corpus, tolower)
        
        ## remove punctuation
        doc.corpus <- tm_map(doc.corpus, removePunctuation)
        
        ##numbers
        doc.corpus <- tm_map(doc.corpus, removeNumbers)
        
        ## common English stopwords.
        doc.corpus <- tm_map(doc.corpus, removeWords, c(stopwords("english"),"samsung","galaxy","s20","ultra", "xiaomi", "redmi", "note", "pro", "apple", "iphone", "max","phone", "mobile","phones", "will"))
        
        # read your documents
        inspect(doc.corpus)
        ##stemming, which removes affixes from words.
        ##(so, for example, "run", "runs" and "running" all become "run").
        #install.packages("SnowballC")
        library(SnowballC)
        
        doc.corpus <- tm_map(doc.corpus, stemDocument) 
        
        doc.corpus <- tm_map(doc.corpus, stripWhitespace)
        inspect(doc.corpus)
        
        doc.corpus <- tm_map(doc.corpus, PlainTextDocument)
        dtm <- DocumentTermMatrix(doc.corpus)
        dtm2 <- as.matrix(dtm)
        frequency <- colSums(dtm2)
        frequency <- sort(frequency,decreasing = TRUE)
        head(frequency)
        
        #install.packages('wordcloud')
        words <- names(frequency)
        #   library(wordcloud)
        #   #wordcloud(words, frequency)
        pos <- scan("positive-words.txt",what="character",comment.char=";")
        neg <- scan("negative-words.txt",what="character",comment.char=";")
        source("sentiment.R")
        
        analysis <- score.sentiment(words,pos,neg)
        table(analysis$score)
        neutral <- length(which(analysis$score == 0))
        positive <- length(which(analysis$score > 0))
        negative <- length(which(analysis$score < 0))
        Sentiment <- c("Negative","Neutral","Positive")
        Count <- c(negative,neutral,positive)
        output <- as.data.frame(Sentiment,Count)
        
        library(ggplot2)
        ggplot(data=analysis, aes(analysis$score)) + geom_histogram(col="red",binwidth=1,aes(fill=..count..)) +scale_fill_gradient("Count", low = "violet", high = "blue") + xlab("Score of words") +ylab("Count of words")+ ggtitle("Histogram")
    })
    
    output$text1 <- renderText({
        paste("Product:", input$selection)
    })
    
    
    ##########################################################
    
    ######  HISTOGRAM  #########
    
    ##########################################################
    
    output$hist=renderPlot({
        
        input$update
        # ...but not for anything else
        isolate({
            withProgress({
                setProgress(message = "Processing corpus...")})
            
            ######################################################
            if(input$selection=="SAMSUNG GALAXY S20 ULTRA")
            {
                # htmlpage <- read_html("http://www.thehindu.com/")
                #forcasthtml <- html_nodes(htmlpage,"#topstory .news , li:nth-child(2) a, #budget2016top a, #news-container ul")
                amazonhtmlpage <- read_html("https://www.amazon.in/Samsung-Galaxy-Storage-Additional-Exchange/dp/B089MSCW8P/ref=sr_1_1?dchild=1&keywords=SAMSUNG+GALAXY+S20+ULTRA&qid=1609753967&sr=8-1")
                amazonforcasthtml <- html_nodes(amazonhtmlpage,".a-expander-partial-collapse-content span")
                flipkarthtmlpage <- read_html("https://www.flipkart.com/samsung-galaxy-s20-ultra-cosmic-gray-128-gb/p/itma25b4687846b4?pid=MOBFZXZ22CWZ2JZB&lid=LSTMOBFZXZ22CWZ2JZB7GKWML&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=15926083-a5bd-4ac8-8921-1e4fab22e802.MOBFZXZ22CWZ2JZB.SEARCH&ppt=sp&ppn=sp&ssid=ynx5hof7w00000001609754052733&qH=397c3aafe7038a5b")
                flipkartforcasthtml <- html_nodes(flipkarthtmlpage,".t-ZTKy div")
                crawl(amazonforcasthtml,flipkartforcasthtml)
            }
            else if(input$selection=="Xiaomi Redmi Note 9 Pro")
            {
                amazonhtmlpage <- read_html("https://www.amazon.in/Test-Exclusive-550/dp/B077Q7GW9V/ref=sr_1_1?dchild=1&keywords=redmi+note+9+pro&qid=1609856185&sr=8-1")
                amazonforcasthtml <- html_nodes(amazonhtmlpage,".a-expander-partial-collapse-content span")
                flipkarthtmlpage <- read_html("https://www.flipkart.com/redmi-note-9-pro-interstellar-black-128-gb/p/itm0418537d115ba?pid=MOBFUZYNSYP64TQK&lid=LSTMOBFUZYNSYP64TQKRIXIXF&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=ec3cb7f6-208c-40e3-8303-66c3f564b791.MOBFUZYNSYP64TQK.SEARCH&ppt=sp&ppn=sp&ssid=y441qhmugw0000001609856175688&qH=2eeee788c4b5011c")
                flipkartforcasthtml <- html_nodes(flipkarthtmlpage,".t-ZTKy div")
                crawl(amazonforcasthtml,flipkartforcasthtml)
            }
            else if(input$selection=="APPLE IPHONE 12 PRO MAX")
            {
                amazonhtmlpage <- read_html("https://www.amazon.in/Apple-iPhone-Pro-Max-128GB/dp/B08L5WS5JB/ref=sr_1_1_sspa?dchild=1&keywords=Apple+iPhone+12+Pro+Max&qid=1609856280&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEzRzFYS1U5SzVHVzY0JmVuY3J5cHRlZElkPUEwMjEwNTE4STdZSkNURUI1Sk4xJmVuY3J5cHRlZEFkSWQ9QTAyNjc3OTMySDA1VEtPRTBPS1JGJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==")
                amazonforcasthtml <- html_nodes(amazonhtmlpage,".a-expander-partial-collapse-content span")
                flipkarthtmlpage <- read_html("https://www.flipkart.com/apple-iphone-12-pro-max-gold-256-gb/p/itm1e0354f5bbc8c?pid=MOBFWBYZZPW8JHQF&lid=LSTMOBFWBYZZPW8JHQF9DJLT1&marketplace=FLIPKART&srno=s_1_1&otracker=AS_Query_HistoryAutoSuggest_1_23_na_na_na&otracker1=AS_Query_HistoryAutoSuggest_1_23_na_na_na&fm=SEARCH&iid=125c007f-bcb9-4c58-8e3f-7ecac519a4a8.MOBFWBYZZPW8JHQF.SEARCH&ppt=sp&ppn=sp&ssid=y7vj4tw6v40000001609856069315&qH=d6aaa1cff1d16f4a")
                flipkartforcasthtml <- html_nodes(flipkarthtmlpage,".t-ZTKy div")
                crawl(amazonforcasthtml,flipkartforcasthtml)
            }
            
            
        })
    })
    ##########################################################
    
    ######  WORDCLOUD  #########
    
    ##########################################################
    
    wcloud<-(function(forcasthtml1,forcasthtml2){
        
        forcast1<-html_text(forcasthtml1)

        if(missing(forcasthtml2)){
            forcast <- html_text(forcasthtml1)
        }else{
            forcast2<-html_text(forcasthtml2)
            forcast<-cbind(forcast1,forcast2)
        }
        
        #forcast <- html_text(forcasthtml)
        #install.packages("tm") 
        #R package for text mining
        library(tm)
        #load your texts into R.
        ###  docs <- Corpus(DirSource(cname)) 
        doc.vec <- VectorSource(forcast)
        doc.corpus <- VCorpus(doc.vec)
        summary(doc.corpus)
        
        ##First we convert all of the text to lowercase
        doc.corpus <- tm_map(doc.corpus, tolower)
        
        ## remove punctuation
        doc.corpus <- tm_map(doc.corpus, removePunctuation)
        
        ##numbers
        doc.corpus <- tm_map(doc.corpus, removeNumbers)
        
        ## common English stopwords.
        doc.corpus <- tm_map(doc.corpus, removeWords, c(stopwords("english"),"samsung","galaxy","s20","ultra", "xiaomi", "redmi", "note", "pro", "apple", "iphone", "max", "phone", "mobile","phones", "will"))
        
        # read your documents
        inspect(doc.corpus)
        
        ##stemming, which removes affixes from words.
        ##(so, for example, "run", "runs" and "running" all become "run").
        #install.packages("SnowballC")
        library(SnowballC)
        #copy<- doc.corpus
        #doc.corpus <- tm_map(doc.corpus, stemDocument) 
        #doc.corpus <- tm_map(doc.corpus, stripWhitespace)
        #doc.corpus <- tm_map(doc.corpus, stemCompletion,dictionary="english")  
        
        inspect(doc.corpus)
        ####writeLines(as.character(doc.corpus))
        #parseddata = paste(doc.corpus, collapse = " ")
        #parseddata
        doc.corpus <- tm_map(doc.corpus, PlainTextDocument)
        dtm <- DocumentTermMatrix(doc.corpus)
        dtm2 <- as.matrix(dtm)
        frequency <- colSums(dtm2)
        frequency <- sort(frequency,decreasing = TRUE)
        head(frequency)
        #install.packages('wordcloud')
        words <- names(frequency)
        library(wordcloud)
        #wordcloud(words, frequency)
        d <- data.frame(word = names(frequency),freq=frequency)
        head(d, 10)
        
        #####The importance of words can be illustrated as a word cloud as follow :
        set.seed(1234)
        wordcloud(words = d$word, freq = d$freq, min.freq = 1,
                  max.words=input$max, random.order=FALSE, rot.per=0.35,
                  colors=brewer.pal(8, "Dark2"))
    })
    
    output$plot <- renderPlot({
        input$update
        # ...but not for anything else
        isolate({
            withProgress({
                setProgress(message = "Processing corpus...")})
            #################################################################
            if(input$selection=="SAMSUNG GALAXY S20 ULTRA")
            {
                amazonhtmlpage <- read_html("https://www.amazon.in/Samsung-Galaxy-Storage-Additional-Exchange/dp/B089MSCW8P/ref=sr_1_1?dchild=1&keywords=SAMSUNG+GALAXY+S20+ULTRA&qid=1609753967&sr=8-1")
                amazonforcasthtml <- html_nodes(amazonhtmlpage,".a-expander-partial-collapse-content span")
                flipkarthtmlpage <- read_html("https://www.flipkart.com/samsung-galaxy-s20-ultra-cosmic-gray-128-gb/p/itma25b4687846b4?pid=MOBFZXZ22CWZ2JZB&lid=LSTMOBFZXZ22CWZ2JZB7GKWML&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=15926083-a5bd-4ac8-8921-1e4fab22e802.MOBFZXZ22CWZ2JZB.SEARCH&ppt=sp&ppn=sp&ssid=ynx5hof7w00000001609754052733&qH=397c3aafe7038a5b")
                flipkartforcasthtml <- html_nodes(flipkarthtmlpage,".t-ZTKy div")
                wcloud(amazonforcasthtml,flipkartforcasthtml)
                
            }else if(input$selection=="Xiaomi Redmi Note 9 Pro")
                
            {
                amazonhtmlpage <- read_html("https://www.amazon.in/Test-Exclusive-550/dp/B077Q7GW9V/ref=sr_1_1?dchild=1&keywords=redmi+note+9+pro&qid=1609856185&sr=8-1")
                amazonforcasthtml <- html_nodes(amazonhtmlpage,".a-expander-partial-collapse-content span")
                flipkarthtmlpage <- read_html("https://www.flipkart.com/redmi-note-9-pro-interstellar-black-128-gb/p/itm0418537d115ba?pid=MOBFUZYNSYP64TQK&lid=LSTMOBFUZYNSYP64TQKRIXIXF&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=ec3cb7f6-208c-40e3-8303-66c3f564b791.MOBFUZYNSYP64TQK.SEARCH&ppt=sp&ppn=sp&ssid=y441qhmugw0000001609856175688&qH=2eeee788c4b5011c")
                flipkartforcasthtml <- html_nodes(flipkarthtmlpage,".t-ZTKy div")
                wcloud(amazonforcasthtml,flipkartforcasthtml)
                
            }else if(input$selection=="APPLE IPHONE 12 PRO MAX")
            {
                amazonhtmlpage <- read_html("https://www.amazon.in/Apple-iPhone-Pro-Max-128GB/dp/B08L5WS5JB/ref=sr_1_1_sspa?dchild=1&keywords=Apple+iPhone+12+Pro+Max&qid=1609856280&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEzRzFYS1U5SzVHVzY0JmVuY3J5cHRlZElkPUEwMjEwNTE4STdZSkNURUI1Sk4xJmVuY3J5cHRlZEFkSWQ9QTAyNjc3OTMySDA1VEtPRTBPS1JGJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==")
                amazonforcasthtml <- html_nodes(amazonhtmlpage,".a-expander-partial-collapse-content span")
                flipkarthtmlpage <- read_html("https://www.flipkart.com/apple-iphone-12-pro-max-gold-256-gb/p/itm1e0354f5bbc8c?pid=MOBFWBYZZPW8JHQF&lid=LSTMOBFWBYZZPW8JHQF9DJLT1&marketplace=FLIPKART&srno=s_1_1&otracker=AS_Query_HistoryAutoSuggest_1_23_na_na_na&otracker1=AS_Query_HistoryAutoSuggest_1_23_na_na_na&fm=SEARCH&iid=125c007f-bcb9-4c58-8e3f-7ecac519a4a8.MOBFWBYZZPW8JHQF.SEARCH&ppt=sp&ppn=sp&ssid=y7vj4tw6v40000001609856069315&qH=d6aaa1cff1d16f4a")
                flipkartforcasthtml <- html_nodes(flipkarthtmlpage,".t-ZTKy div")
                wcloud(amazonforcasthtml,flipkartforcasthtml)
                
            }
            
        })
    })
    outputOptions(output,"plot",suspendWhenHidden = FALSE)
}

shinyApp(ui=ui, server=server)